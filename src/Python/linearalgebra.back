#!/usr/bin/env python

#https://www.math.ubc.ca/~pwalls/math-python/linear-algebra/solving-linear-systems/
import networkx as nx
import timeit
import matplotlib.pyplot as plt
from numpy.linalg import matrix_power as mpow
import numpy as np
import sympy as sym
import scipy.linalg as la

a = np.array([1, 3, -2, 1])

a.ndim

a.shape

a.size

M = np.array([[1, 2], [3, 7], [-1, 5]])

M.ndim

M.shape

M.size

col = M[:, 1]

col

col.ndim

col.shape

col.size

column = np.array([2, 7, 5]).reshape(3, 1)

column

f'Dimensions: {column.ndim}'
f'Shape: {column.shape}'
f'Size: {column.size}'

f'Dimensions: {col.ndim}'
f'Shape: {col.shape}'
f'Size: {col.size}'

M = np.array([[3, 4], [-1, 5]])
M

M * M

M @ M

A = np.array([[1, 3], [-1, 7]])
A

B = np.array([[5, 2], [1, 2]])
B

I = np.eye(2)

2*I + 3*A - A@B


M = np.array([[3, 4], [-1, 5]])
M

mpow(M, 2)

mpow(M, 5)

M @ M @ M @ M @ M

mpow(M, 3)

M @ M @ M

M.T

M @ M.T

A = np.array([[1, 2], [3, 4]])
A

la.inv(A)

np.trace(A)

la.det(A)

trace_A = np.trace(A)
det_A = la.det(A)
I = np.eye(2)
A @ A - trace_A * A + det_A * I

N = np.random.randint(0, 10, [2, 2])
N

trace_N = np.trace(N)
det_N = la.det(N)
I = np.eye(2)
np.round(N @ N - trace_N * N + det_N * I, 15)


def proj(v, w):
    """Project vector v onto w.

    Args:
        v (np.array): A vector.
        w (np.array): A vector.

    Returns:
        np.array: The projection of v over w.
    """
    v = np.array(v)
    w = np.array(w)
    return np.sum(v * w)/np.sum(w * w) * w   # or (v @ w)/(w @ w) * w


proj([1, 2, 3], [1, 1, 1])


# %matplotlib inline
# https://stackoverflow.com/a/43028034/9302545

A = np.array([[1, 1, 2], [-1, 3, 1], [0, 5, 2]])
A

E1 = np.array([[1, 0, 3], [0, 1, 0], [0, 0, 1]])
E1

E1 @ A

E2 = np.array([[1, 0, 0], [0, -2, 0], [0, 0, 1]])
E2

E2 @ A

E3 = np.array([[1, 0, 0], [0, 0, 1], [0, 1, 0]])
E3

E3 @ A


def add_row(A, k, i, j):
    """Add k times row j to row i in matrix A.

    Args:
        A (np.array): A matrix.
        k (int): ??
        i (int): Row position.
        j (int): Column position.

    Returns:
        np.matrix: ??
    """
    n = A.shape[0]
    E = np.eye(n)
    if i == j:
        E[i, i] = k + 1
    else:
        E[i, j] = k
    return E @ A


help(add_row)

M = np.array([[1, 1], [3, 2]])
M

add_row(M, k=2, i=0, j=1)

add_row(M, k=3, i=1, j=1)


def scale_row(A, k, i):
    """Multiply row i by k in matrix A.

    Args:
        A (np.array): A matrix
        k (int): ??
        i (int): ??

    Returns:
        np.matrix: ??
    """
    n = A.shape[0]
    E = np.eye(n)
    E[i, i] = k
    return E @ A


M = np.array([[3, 1], [-2, 7]])
M

scale_row(M, k=3, i=1)

A = np.array([[1, 1, 1], [1, -1, 0]])
A

scale_row(A, k=5, i=1)


def switch_rows(A, i, j):
    """Switch rows i and j in matrix A.

    Args:
        A (np.array): A matrix.
        i (int): Row position.
        j (int): Column position.

    Returns:
        np.array: [description]
    """
    n = A.shape[0]
    E = np.eye(n)
    E[i, i] = 0
    E[j, j] = 0
    E[i, j] = 1
    E[j, i] = 1
    return E @ A


A = np.array([[1, 1, 1], [1, -1, 0]])
A


switch_rows(A, i=0, j=1)

M = np.array([[5, 4, 2], [-1, 2, 1], [1, 1, 1]])
M

A = np.hstack([M, np.eye(3)])
A

A1 = switch_rows(A, i=0, j=2)
A1

A2 = add_row(A1, k=1, i=1, j=0)
A2

A3 = add_row(A2, k=-5, i=2, j=0)
A3

A4 = switch_rows(A3, i=1, j=2)
A4

A5 = scale_row(A4, k=-1, i=1)
A5

A6 = add_row(A5, k=-3, i=2, j=1)
A6

A7 = scale_row(A6, k=-1/7, i=2)
A7

A8 = add_row(A7, k=-3, i=1, j=2)
A8

A9 = add_row(A8, k=-1, i=0, j=2)
A9

A10 = add_row(A9, k=-1, i=0, j=1)
A10

Minv = A10[:, 3:]
Minv

result = Minv @ M
result

np.round(result, 15)

A = np.array([[6, 15, 1], [8, 7, 12], [2, 7, 8]])
A

b = np.array([[2], [14], [10]])
b

M = np.hstack([A, b])
M

M1 = scale_row(M, k=1/6, i=0)
M1

M2 = add_row(M1, k=-8, i=1, j=0)
M2

M3 = add_row(M2, k=-2, i=2, j=0)
M3

M4 = scale_row(M3, k=-1/13, i=1)
M4

M5 = add_row(M4, k=-2, i=2, j=1)
M5

M6 = scale_row(M5, k=1/M5[2, 2], i=2)
M6

M7 = add_row(M6, k=-M6[1, 2], i=1, j=2)
M7

M8 = add_row(M7, k=-M7[0, 2], i=0, j=2)
M8

M9 = add_row(M8, k=-M8[0, 1], i=0, j=1)
M9

x = M9[:, 3].reshape(3, 1)
x

x = la.solve(A, b)
x

A = np.array([[1, 1], [1, -1]])
A

b1 = np.array([2, 0])
b1

x1 = la.solve(A, b1)
x1

A = np.array([[1, 1], [1, -1]])
b2 = np.array([2, 0]).reshape(2, 1)
x2 = la.solve(A, b2)
x2

A = np.array([[1, 1], [1, -1]])
b3 = np.array([[2, 2], [0, 1]])
x3 = la.solve(A, b3)
x3

A = np.array([[2, 1], [1, 1]])
A

b = np.array([1, -1]).reshape(2, 1)
b

x = la.solve(A, b)
x

Ainv = la.inv(A)
Ainv

x = Ainv @ b
x

N = 1000
A = np.random.rand(N, N)
b = np.random.rand(N, 1)

A[:3, :3]

b[:4, :]

% % timeit

setup1 = """
import scipy.linalg as la
import numpy as np

N = 1000
A = np.random.rand(N, N)
b = np.random.rand(N, 1)
la.solve(A, b)
"""

timeit.timeit(setup=setup1, number=10000)

setup2 = """
import scipy.linalg as la
import numpy as np

N = 1000
A = np.random.rand(N, N)
b = np.random.rand(N, 1)
x = la.inv(A) @ b
"""
# https://docs.python.org/es/3/library/timeit.html
timeit.timeit(setup=setup2, number=10000)

x = np.array([-1, 0, 1])
X = np.column_stack([[1, 1, 1], x, x**2])
X

y = np.array([1, 0, 1]).reshape(3, 1)
y

a = la.solve(X, y)
a

x = np.array([0, 3, 8])
X = np.column_stack([[1, 1, 1], x, x**2])
X

y = np.array([6, 1, 2]).reshape(3, 1)
y

a = la.solve(X, y)
a

xs = np.linspace(0, 8, 20)
ys = a[0] + a[1]*xs + a[2]*xs**2
plt.plot(xs, ys, x, y, 'b.', ms=20)
plt.show()

N = 10
x = np.arange(0, N)
y = np.random.randint(0, 10, N)
plt.plot(x, y, 'r.')
plt.show()

X = np.column_stack([x**k for k in range(0, N)])
X[:5, :5]

X = np.vander(x, increasing=True)
X[:5, :5]

a = la.solve(X, y)

xs = np.linspace(0, N-1, 200)
ys = sum([a[k]*xs**k for k in range(0, N)])
plt.plot(x, y, 'r.', xs, ys)
plt.show()

a0 = 2
a1 = 3
N = 100
x = np.random.rand(100)
noise = 0.1*np.random.randn(100)
y = a0 + a1*x + noise
plt.scatter(x, y)
plt.show()

X = np.column_stack([np.ones(N), x])
X.shape

X[:5, :]

a = la.solve(X.T @ X, X.T @ y)
a

xs = np.linspace(0, 1, 10)
ys = a[0] + a[1]*xs
plt.plot(xs, ys, 'r', linewidth=4)
plt.scatter(x, y)
plt.show()

years = np.array([2006, 2007, 2008, 2009, 2010,
                  2011, 2012, 2013, 2014, 2015, 2016])
games = [80, 77, 82, 82, 73, 82, 58, 78, 6, 35, 66]
points = np.array([35.4, 31.6, 28.3, 26.8, 27, 25.3,
                   27.9, 27.3, 13.8, 22.3, 17.6])

fig = plt.figure(figsize=(12, 10))
axs = fig.subplots(2, 1, sharex=True)
axs[0].plot(years, points, 'b.', ms=15)
axs[0].set_title('Kobe Bryant, Points per Game')
axs[0].set_ylim([0, 40])
axs[0].grid(True)
axs[1].bar(years, games)
axs[1].set_title('Kobe Bryant, Games Played')
axs[1].set_ylim([0, 100])
axs[1].grid(True)
plt.show()

years = np.array([2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016])
games = np.array([80, 77, 82, 82, 73, 82, 58, 78, 35, 66])
points = np.array([35.4, 31.6, 28.3, 26.8, 27, 25.3, 27.9, 27.3, 22.3, 17.6])

avg_games_per_year = np.mean(games)
avg_games_per_year

X = np.column_stack([np.ones(len(years)), years])
a = la.solve(X.T @ X, X.T @ points)
model = a[0] + a[1]*years

plt.plot(years, model, years, points, 'b.', ms=15)
plt.title('Kobe Bryant, Points per Game')
plt.ylim([0, 40])
plt.grid(True)
plt.show()

future_years = np.array([2017, 2018, 2019, 2020, 2021])
future_points = (a[0] + a[1]*future_years)*avg_games_per_year
total_points = 33643 + np.cumsum(future_points)
kareem = 38387*np.ones(len(future_years))

plt.plot(future_years, total_points, future_years, kareem)
plt.grid(True)
plt.xticks(future_years)
plt.title('Kobe Bryant Total Points Prediction')
plt.show()

a0 = 3
a1 = 5
a2 = 8
N = 1000
x = 2*np.random.rand(N) - 1  # Random numbers in the interval (-1,1)
noise = np.random.randn(N)
y = a0 + a1*x + a2*x**2 + noise
plt.scatter(x, y, alpha=0.5, lw=0)
plt.show()

X = np.column_stack([np.ones(N), x, x**2])
a = la.solve((X.T @ X), X.T @ y)
xs = np.linspace(-1, 1, 20)
ys = a[0] + a[1]*xs + a[2]*xs**2
plt.plot(xs, ys, 'r', linewidth=4)
plt.scatter(x, y, alpha=0.5, lw=0)
plt.show()

G = nx.complete_graph(5)
nx.draw(G, with_labels=True)
A = nx.adjacency_matrix(G).todense()
A

G = nx.dodecahedral_graph()
nx.draw(G, with_labels=True)
A = nx.adjacency_matrix(G).todense()
A

i = 0
j = 15
k = 1
Ak = A
while Ak[i, j] == 0:
    Ak = Ak @ A
    k = k + 1
print('Length of the shortest path is', k)

C3 = nx.complete_graph(3)
nx.draw(C3, with_labels=True)

A3 = nx.adjacency_matrix(C3).todense()
eigvals, eigvecs = la.eig(A3)
int(np.round(np.sum(eigvals.real**3)/6, 0))

C7 = nx.complete_graph(7)
nx.draw(C7, with_labels=True)

A7 = nx.adjacency_matrix(C7).todense()
eigvals, eigvecs = la.eig(A7)
int(np.round(np.sum(eigvals.real**3)/6, 0))


def triangles(M):
    A = (M + M.T)/2
    eigvals, eigvecs = la.eig(A)
    eigvals = eigvals.real
    return int(np.round(np.sum(eigvals**3)/6, 0))


G = nx.turan_graph(10, 5)
nx.draw(G, with_labels=True)

A = nx.adjacency_matrix(G).todense()
A

triangles(A)

G = nx.dodecahedral_graph()
nx.draw(G, with_labels=True)

A = nx.adjacency_matrix(G).todense()
A

np.round(triangles(A), 2)

A = np.array([[1, 0], [0, -2]])
A

results = la.eig(A)
results
results[0]
results[1]

eigvals, eigvecs = la.eig(A)
eigvals
eigvecs

eigvals = eigvals.real
eigvals

lambda1 = eigvals[1]
lambda1

v1 = eigvecs[:, 1].reshape(2, 1)
v1

A @ v1

lambda1 * v1

n = 4
P = np.random.randint(0, 10, (n, n))
P

S = P @ P.T
S

evals, evecs = la.eig(S)
evals

evals = evals.real
evals

evecs

v1 = evecs[:, 0]  # First column is the first eigenvector
v1

v2 = evecs[:, 1]  # Second column is the second eigenvector
v2

v1 @ v2

setup3 = """
import numpy as np
import scipy.linalg as la

P = np.array([[1, 1], [1, -1]])
P

D = np.diag((3, 1))
D

M = P @ D @ la.inv(P)
M

evals, evecs = la.eig(M)
evals

evecs

Pinv = la.inv(P)

k = 20

result = M.copy()
for _ in range(1,k):
    result = result @ M
"""

timeit.timeit(setup=setup3, number=10000)

setup4 = """
import numpy as np
import scipy.linalg as la

P = np.array([[1, 1], [1, -1]])
P

D = np.diag((3, 1))
D

M = P @ D @ la.inv(P)
M

evals, evecs = la.eig(M)
evals

evecs

Pinv = la.inv(P)

k = 20

P @ D**k @ Pinv
"""

timeit.timeit(setup=setup4, number=10000)

#https://reliability.readthedocs.io/en/latest/Solving%20simultaneous%20equations%20with%20sympy.html
#https://apmonitor.com/che263/index.php/Main/PythonSolveEquations
x,y = sym.symbols('x,y')
eq1 = sym.Eq(x+y,5)
eq2 = sym.Eq(x**2+y**2,17)
result = sym.solve([eq1,eq2],(x,y))

a,b = sym.symbols('a,b')
eq1 = sym.Eq(a*1000000**b,119.54907)
eq2 = sym.Eq(a*1000**b,405)
result = sym.solve([eq1,eq2],(a,b))

x,y,z = sym.symbols('x,y,z')
c1 = sym.Symbol('c1')
eq1 = sym.Eq(2*x**2+y+z,1)
eq2 = sym.Eq(x+2*y+z,c1)
eq3 = sym.Eq(-2*x+y,-z)
result = sym.solve([eq1,eq2,eq3],(x,y,z))

x,y,z,t = sym.symbols('x,y,z,t')
a,b,c,d = sym.symbols('a,b,c,d')
eq1 = sym.Eq(a*-1+b*0+c*0+d*0,x)
eq2 = sym.Eq(a*1+b*0+c*0+d*1,y)
eq3 = sym.Eq(a*0+b*-1+c*1+d*1,z)
eq4 = sym.Eq(a*0+b*1+c*0+d*1,t)
result = sym.solve([eq1,eq2,eq3,eq4],(a,b,c,d))

x,y,z,w = sym.symbols('x,y,z,w')
eq1 = sym.Eq(x+2*y-3*z+4*w,0)
eq2 = sym.Eq(2*x-y+2*z-3*w,0)
eq3 = sym.Eq(x-y-z+2*w,0)
result = sym.solve([eq1,eq2,eq3],(x,y,z,w))

#{x: w/14, y: 3*w/7, z: 23*w/14}

x,y,z,w = sym.symbols('x,y,z,w')
eq1 = sym.Eq(x*1/14,0)
eq2 = sym.Eq(x*6/14+y,0)
eq3 = sym.Eq(x*23/14+z,0)
eq4 = sym.Eq(x+w,0)
result = sym.solve([eq1,eq2,eq3,eq4],(x,y,z,w))